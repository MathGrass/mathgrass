{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About this Project MathGrass MathGrass ( Math ematical Gr aph Ass essment ) is a web application that brings automatic assessment to the realm of mathematical graphs. Its core functionality is the definition of graphs and tasks, which the system presents to participants. Tasks consist of form-based questions, graphical labeling, or questions which trigger the execution of a instructor-specified SageMath script. The participants can then interact with the graph in a graph viewer and try to answer the posed questions. Upon requesting an assessment of the individual answers, the assessment server evaluates the participants' answers and returns the results to the users. Furthermore, MathGrass supports incremental hints, which simulate instructor assistance and can support the learning experience. How to Read This Documentation This documentation contains the set of features that MathGrass provides, information about the usage for either instructors or students . Furthermore, there are notes about the deployment of a MathGrass instance and a developer documentation .","title":"About this Project"},{"location":"#about-this-project","text":"","title":"About this Project"},{"location":"#mathgrass","text":"MathGrass ( Math ematical Gr aph Ass essment ) is a web application that brings automatic assessment to the realm of mathematical graphs. Its core functionality is the definition of graphs and tasks, which the system presents to participants. Tasks consist of form-based questions, graphical labeling, or questions which trigger the execution of a instructor-specified SageMath script. The participants can then interact with the graph in a graph viewer and try to answer the posed questions. Upon requesting an assessment of the individual answers, the assessment server evaluates the participants' answers and returns the results to the users. Furthermore, MathGrass supports incremental hints, which simulate instructor assistance and can support the learning experience.","title":"MathGrass"},{"location":"#how-to-read-this-documentation","text":"This documentation contains the set of features that MathGrass provides, information about the usage for either instructors or students . Furthermore, there are notes about the deployment of a MathGrass instance and a developer documentation .","title":"How to Read This Documentation"},{"location":"deployment/","text":"Deployment","title":"Deployment"},{"location":"deployment/#deployment","text":"","title":"Deployment"},{"location":"dev_docs/","text":"Developer Documentation Requirements Make sure that you have JDK>=17, Gradle, Docker, docker-compose, node>=18.12.0 with npm, and Python>=3.10 installed. Set Up Your Development Environment Clone the projects for the frontend and the backend and evaluator Start the dependencies of the API and the evaluator(PostGres & RabbitMQ) either manually or the provided docker compose project via docker-compose -f mathgrass-backend-infrastructure.yaml up -d in the folder mathgrass-server/api/docker Import the gradle project under mathgrass-server/api into your favorite Java IDE and run the application (entrypoint: MathgrassServerApplication.java ) Import the React project under mathgrass-frontend into your favorite TypeScript IDE and run npm install && npm run start You can check whether the project has build correctly by checking the following paths on localhost: Swagger UI (http://localhost:8080/swagger-ui/) Frontend (http://localhost:3000)","title":"Developer Documentation"},{"location":"dev_docs/#developer-documentation","text":"","title":"Developer Documentation"},{"location":"dev_docs/#requirements","text":"Make sure that you have JDK>=17, Gradle, Docker, docker-compose, node>=18.12.0 with npm, and Python>=3.10 installed.","title":"Requirements"},{"location":"dev_docs/#set-up-your-development-environment","text":"Clone the projects for the frontend and the backend and evaluator Start the dependencies of the API and the evaluator(PostGres & RabbitMQ) either manually or the provided docker compose project via docker-compose -f mathgrass-backend-infrastructure.yaml up -d in the folder mathgrass-server/api/docker Import the gradle project under mathgrass-server/api into your favorite Java IDE and run the application (entrypoint: MathgrassServerApplication.java ) Import the React project under mathgrass-frontend into your favorite TypeScript IDE and run npm install && npm run start You can check whether the project has build correctly by checking the following paths on localhost: Swagger UI (http://localhost:8080/swagger-ui/) Frontend (http://localhost:3000)","title":"Set Up Your Development Environment"},{"location":"features/","text":"Features From the Perspective of an Instructor Instructors can: define new graphs in a graphical editor specify task types and concrete tasks, consisting of a task type, a graph, and a set of questions provide answers to the From the Perspective of a Student","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#from-the-perspective-of-an-instructor","text":"Instructors can: define new graphs in a graphical editor specify task types and concrete tasks, consisting of a task type, a graph, and a set of questions provide answers to the","title":"From the Perspective of an Instructor"},{"location":"features/#from-the-perspective-of-a-student","text":"","title":"From the Perspective of a Student"},{"location":"usage_instructor/","text":"Using MathGrass for Teaching","title":"Using MathGrass for Teaching"},{"location":"usage_instructor/#using-mathgrass-for-teaching","text":"","title":"Using MathGrass for Teaching"},{"location":"usage_student/","text":"Using MathGrass for Learning","title":"Using MathGrass for Learning"},{"location":"usage_student/#using-mathgrass-for-learning","text":"","title":"Using MathGrass for Learning"}]}